
sendNum.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000800  00000894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000800  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080011a  0080011a  000008ae  2**0
                  ALLOC
  3 .stab         000009d8  00000000  00000000  000008b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001f7  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000147f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000098  00000000  00000000  000014b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000582  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000017f  00000000  00000000  00001aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000038f  00000000  00000000  00001c49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a8  00000000  00000000  00001fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002a0  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000374  00000000  00000000  00002420  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  00002794  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_18>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 e0       	ldi	r30, 0x00	; 0
  90:	f8 e0       	ldi	r31, 0x08	; 8
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	aa 31       	cpi	r26, 0x1A	; 26
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	aa e1       	ldi	r26, 0x1A	; 26
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a8 32       	cpi	r26, 0x28	; 40
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  b2:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_18>:
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	28 97       	sbiw	r28, 0x08	; 8
  e6:	de bf       	out	0x3e, r29	; 62
  e8:	cd bf       	out	0x3d, r28	; 61
  ea:	20 91 1a 01 	lds	r18, 0x011A
  ee:	30 91 1b 01 	lds	r19, 0x011B
  f2:	80 91 00 01 	lds	r24, 0x0100
  f6:	90 91 01 01 	lds	r25, 0x0101
  fa:	28 17       	cp	r18, r24
  fc:	39 07       	cpc	r19, r25
  fe:	88 f1       	brcs	.+98     	; 0x162 <__vector_18+0xa8>
 100:	80 91 1c 01 	lds	r24, 0x011C
 104:	90 91 1d 01 	lds	r25, 0x011D
 108:	a0 91 1e 01 	lds	r26, 0x011E
 10c:	b0 91 1f 01 	lds	r27, 0x011F
 110:	9c 01       	movw	r18, r24
 112:	4a e0       	ldi	r20, 0x0A	; 10
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	ce 01       	movw	r24, r28
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	bc 01       	movw	r22, r24
 11c:	c9 01       	movw	r24, r18
 11e:	0e 94 b9 03 	call	0x772	; 0x772 <itoa>
 122:	ce 01       	movw	r24, r28
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	0e 94 9a 03 	call	0x734	; 0x734 <uart_send_string>
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 9a 03 	call	0x734	; 0x734 <uart_send_string>
 132:	80 91 1c 01 	lds	r24, 0x011C
 136:	90 91 1d 01 	lds	r25, 0x011D
 13a:	a0 91 1e 01 	lds	r26, 0x011E
 13e:	b0 91 1f 01 	lds	r27, 0x011F
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	a1 1d       	adc	r26, r1
 146:	b1 1d       	adc	r27, r1
 148:	80 93 1c 01 	sts	0x011C, r24
 14c:	90 93 1d 01 	sts	0x011D, r25
 150:	a0 93 1e 01 	sts	0x011E, r26
 154:	b0 93 1f 01 	sts	0x011F, r27
 158:	10 92 1b 01 	sts	0x011B, r1
 15c:	10 92 1a 01 	sts	0x011A, r1
 160:	09 c0       	rjmp	.+18     	; 0x174 <__vector_18+0xba>
 162:	80 91 1a 01 	lds	r24, 0x011A
 166:	90 91 1b 01 	lds	r25, 0x011B
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	90 93 1b 01 	sts	0x011B, r25
 170:	80 93 1a 01 	sts	0x011A, r24
 174:	28 96       	adiw	r28, 0x08	; 8
 176:	f8 94       	cli
 178:	de bf       	out	0x3e, r29	; 62
 17a:	cd bf       	out	0x3d, r28	; 61
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <main>:
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
 1aa:	6a 97       	sbiw	r28, 0x1a	; 26
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	f8 94       	cli
 1b0:	de bf       	out	0x3e, r29	; 62
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	cd bf       	out	0x3d, r28	; 61
 1b6:	ce 01       	movw	r24, r28
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	9a 8b       	std	Y+18, r25	; 0x12
 1bc:	89 8b       	std	Y+17, r24	; 0x11
 1be:	e4 e0       	ldi	r30, 0x04	; 4
 1c0:	f1 e0       	ldi	r31, 0x01	; 1
 1c2:	fc 8b       	std	Y+20, r31	; 0x14
 1c4:	eb 8b       	std	Y+19, r30	; 0x13
 1c6:	f8 e0       	ldi	r31, 0x08	; 8
 1c8:	fd 8b       	std	Y+21, r31	; 0x15
 1ca:	eb 89       	ldd	r30, Y+19	; 0x13
 1cc:	fc 89       	ldd	r31, Y+20	; 0x14
 1ce:	00 80       	ld	r0, Z
 1d0:	8b 89       	ldd	r24, Y+19	; 0x13
 1d2:	9c 89       	ldd	r25, Y+20	; 0x14
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	9c 8b       	std	Y+20, r25	; 0x14
 1d8:	8b 8b       	std	Y+19, r24	; 0x13
 1da:	e9 89       	ldd	r30, Y+17	; 0x11
 1dc:	fa 89       	ldd	r31, Y+18	; 0x12
 1de:	00 82       	st	Z, r0
 1e0:	89 89       	ldd	r24, Y+17	; 0x11
 1e2:	9a 89       	ldd	r25, Y+18	; 0x12
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	9a 8b       	std	Y+18, r25	; 0x12
 1e8:	89 8b       	std	Y+17, r24	; 0x11
 1ea:	9d 89       	ldd	r25, Y+21	; 0x15
 1ec:	91 50       	subi	r25, 0x01	; 1
 1ee:	9d 8b       	std	Y+21, r25	; 0x15
 1f0:	ed 89       	ldd	r30, Y+21	; 0x15
 1f2:	ee 23       	and	r30, r30
 1f4:	51 f7       	brne	.-44     	; 0x1ca <main+0x28>
 1f6:	ce 01       	movw	r24, r28
 1f8:	09 96       	adiw	r24, 0x09	; 9
 1fa:	9f 8b       	std	Y+23, r25	; 0x17
 1fc:	8e 8b       	std	Y+22, r24	; 0x16
 1fe:	fe 01       	movw	r30, r28
 200:	31 96       	adiw	r30, 0x01	; 1
 202:	f9 8f       	std	Y+25, r31	; 0x19
 204:	e8 8f       	std	Y+24, r30	; 0x18
 206:	f8 e0       	ldi	r31, 0x08	; 8
 208:	fa 8f       	std	Y+26, r31	; 0x1a
 20a:	e8 8d       	ldd	r30, Y+24	; 0x18
 20c:	f9 8d       	ldd	r31, Y+25	; 0x19
 20e:	00 80       	ld	r0, Z
 210:	88 8d       	ldd	r24, Y+24	; 0x18
 212:	99 8d       	ldd	r25, Y+25	; 0x19
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	99 8f       	std	Y+25, r25	; 0x19
 218:	88 8f       	std	Y+24, r24	; 0x18
 21a:	ee 89       	ldd	r30, Y+22	; 0x16
 21c:	ff 89       	ldd	r31, Y+23	; 0x17
 21e:	00 82       	st	Z, r0
 220:	8e 89       	ldd	r24, Y+22	; 0x16
 222:	9f 89       	ldd	r25, Y+23	; 0x17
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	9f 8b       	std	Y+23, r25	; 0x17
 228:	8e 8b       	std	Y+22, r24	; 0x16
 22a:	9a 8d       	ldd	r25, Y+26	; 0x1a
 22c:	91 50       	subi	r25, 0x01	; 1
 22e:	9a 8f       	std	Y+26, r25	; 0x1a
 230:	ea 8d       	ldd	r30, Y+26	; 0x1a
 232:	ee 23       	and	r30, r30
 234:	51 f7       	brne	.-44     	; 0x20a <main+0x68>
 236:	ce 01       	movw	r24, r28
 238:	09 96       	adiw	r24, 0x09	; 9
 23a:	0e 94 37 01 	call	0x26e	; 0x26e <uart_init>
 23e:	8c e0       	ldi	r24, 0x0C	; 12
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	0e 94 9a 03 	call	0x734	; 0x734 <uart_send_string>
 246:	ae e6       	ldi	r26, 0x6E	; 110
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	ee e6       	ldi	r30, 0x6E	; 110
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	81 60       	ori	r24, 0x01	; 1
 252:	8c 93       	st	X, r24
 254:	e4 e8       	ldi	r30, 0x84	; 132
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	11 82       	std	Z+1, r1	; 0x01
 25a:	10 82       	st	Z, r1
 25c:	a5 e4       	ldi	r26, 0x45	; 69
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	e5 e4       	ldi	r30, 0x45	; 69
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	84 60       	ori	r24, 0x04	; 4
 268:	8c 93       	st	X, r24
 26a:	78 94       	sei
 26c:	ff cf       	rjmp	.-2      	; 0x26c <main+0xca>

0000026e <uart_init>:
static bool byte_transmitted = false;


// used to initialize the UART
// note: see constraints on uart_config_t
void uart_init(uart_config_t* config) {
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	00 d0       	rcall	.+0      	; 0x274 <uart_init+0x6>
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
 278:	9a 83       	std	Y+2, r25	; 0x02
 27a:	89 83       	std	Y+1, r24	; 0x01

	// store the new configuration
	uart_config = *config;	
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	9a 81       	ldd	r25, Y+2	; 0x02
 280:	27 e0       	ldi	r18, 0x07	; 7
 282:	fc 01       	movw	r30, r24
 284:	a0 e2       	ldi	r26, 0x20	; 32
 286:	b1 e0       	ldi	r27, 0x01	; 1
 288:	01 90       	ld	r0, Z+
 28a:	0d 92       	st	X+, r0
 28c:	2a 95       	dec	r18
 28e:	e1 f7       	brne	.-8      	; 0x288 <uart_init+0x1a>
	
	// the UBRR and U2X0 settings are optimized based on 
	// calculations for a 10Mhz oscillator
	// (see pages 167 and 187-190 in the Atmega644 preliminary)
	switch(config->baud_rate) {
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	9a 81       	ldd	r25, Y+2	; 0x02
 294:	fc 01       	movw	r30, r24
 296:	80 81       	ld	r24, Z
 298:	91 81       	ldd	r25, Z+1	; 0x01
 29a:	a2 81       	ldd	r26, Z+2	; 0x02
 29c:	b3 81       	ldd	r27, Z+3	; 0x03
 29e:	81 15       	cp	r24, r1
 2a0:	fb e4       	ldi	r31, 0x4B	; 75
 2a2:	9f 07       	cpc	r25, r31
 2a4:	a1 05       	cpc	r26, r1
 2a6:	b1 05       	cpc	r27, r1
 2a8:	09 f4       	brne	.+2      	; 0x2ac <uart_init+0x3e>
 2aa:	bf c0       	rjmp	.+382    	; 0x42a <uart_init+0x1bc>
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	2b e4       	ldi	r18, 0x4B	; 75
 2b0:	92 07       	cpc	r25, r18
 2b2:	a1 05       	cpc	r26, r1
 2b4:	b1 05       	cpc	r27, r1
 2b6:	58 f5       	brcc	.+86     	; 0x30e <uart_init+0xa0>
 2b8:	80 3c       	cpi	r24, 0xC0	; 192
 2ba:	e2 e1       	ldi	r30, 0x12	; 18
 2bc:	9e 07       	cpc	r25, r30
 2be:	a1 05       	cpc	r26, r1
 2c0:	b1 05       	cpc	r27, r1
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <uart_init+0x58>
 2c4:	79 c0       	rjmp	.+242    	; 0x3b8 <uart_init+0x14a>
 2c6:	81 3c       	cpi	r24, 0xC1	; 193
 2c8:	f2 e1       	ldi	r31, 0x12	; 18
 2ca:	9f 07       	cpc	r25, r31
 2cc:	a1 05       	cpc	r26, r1
 2ce:	b1 05       	cpc	r27, r1
 2d0:	78 f4       	brcc	.+30     	; 0x2f0 <uart_init+0x82>
 2d2:	80 3b       	cpi	r24, 0xB0	; 176
 2d4:	24 e0       	ldi	r18, 0x04	; 4
 2d6:	92 07       	cpc	r25, r18
 2d8:	a1 05       	cpc	r26, r1
 2da:	b1 05       	cpc	r27, r1
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <uart_init+0x72>
 2de:	44 c0       	rjmp	.+136    	; 0x368 <uart_init+0xfa>
 2e0:	80 36       	cpi	r24, 0x60	; 96
 2e2:	e9 e0       	ldi	r30, 0x09	; 9
 2e4:	9e 07       	cpc	r25, r30
 2e6:	a1 05       	cpc	r26, r1
 2e8:	b1 05       	cpc	r27, r1
 2ea:	09 f4       	brne	.+2      	; 0x2ee <uart_init+0x80>
 2ec:	51 c0       	rjmp	.+162    	; 0x390 <uart_init+0x122>
 2ee:	0e c1       	rjmp	.+540    	; 0x50c <uart_init+0x29e>
 2f0:	80 38       	cpi	r24, 0x80	; 128
 2f2:	f5 e2       	ldi	r31, 0x25	; 37
 2f4:	9f 07       	cpc	r25, r31
 2f6:	a1 05       	cpc	r26, r1
 2f8:	b1 05       	cpc	r27, r1
 2fa:	09 f4       	brne	.+2      	; 0x2fe <uart_init+0x90>
 2fc:	70 c0       	rjmp	.+224    	; 0x3de <uart_init+0x170>
 2fe:	80 34       	cpi	r24, 0x40	; 64
 300:	28 e3       	ldi	r18, 0x38	; 56
 302:	92 07       	cpc	r25, r18
 304:	a1 05       	cpc	r26, r1
 306:	b1 05       	cpc	r27, r1
 308:	09 f4       	brne	.+2      	; 0x30c <uart_init+0x9e>
 30a:	7c c0       	rjmp	.+248    	; 0x404 <uart_init+0x196>
 30c:	ff c0       	rjmp	.+510    	; 0x50c <uart_init+0x29e>
 30e:	81 15       	cp	r24, r1
 310:	e1 ee       	ldi	r30, 0xE1	; 225
 312:	9e 07       	cpc	r25, r30
 314:	a1 05       	cpc	r26, r1
 316:	b1 05       	cpc	r27, r1
 318:	09 f4       	brne	.+2      	; 0x31c <uart_init+0xae>
 31a:	c0 c0       	rjmp	.+384    	; 0x49c <uart_init+0x22e>
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	f1 ee       	ldi	r31, 0xE1	; 225
 320:	9f 07       	cpc	r25, r31
 322:	a1 05       	cpc	r26, r1
 324:	b1 05       	cpc	r27, r1
 326:	78 f4       	brcc	.+30     	; 0x346 <uart_init+0xd8>
 328:	80 38       	cpi	r24, 0x80	; 128
 32a:	20 e7       	ldi	r18, 0x70	; 112
 32c:	92 07       	cpc	r25, r18
 32e:	a1 05       	cpc	r26, r1
 330:	b1 05       	cpc	r27, r1
 332:	09 f4       	brne	.+2      	; 0x336 <uart_init+0xc8>
 334:	8d c0       	rjmp	.+282    	; 0x450 <uart_init+0x1e2>
 336:	81 15       	cp	r24, r1
 338:	e6 e9       	ldi	r30, 0x96	; 150
 33a:	9e 07       	cpc	r25, r30
 33c:	a1 05       	cpc	r26, r1
 33e:	b1 05       	cpc	r27, r1
 340:	09 f4       	brne	.+2      	; 0x344 <uart_init+0xd6>
 342:	99 c0       	rjmp	.+306    	; 0x476 <uart_init+0x208>
 344:	e3 c0       	rjmp	.+454    	; 0x50c <uart_init+0x29e>
 346:	81 15       	cp	r24, r1
 348:	fc e2       	ldi	r31, 0x2C	; 44
 34a:	9f 07       	cpc	r25, r31
 34c:	f1 e0       	ldi	r31, 0x01	; 1
 34e:	af 07       	cpc	r26, r31
 350:	b1 05       	cpc	r27, r1
 352:	09 f4       	brne	.+2      	; 0x356 <uart_init+0xe8>
 354:	b6 c0       	rjmp	.+364    	; 0x4c2 <uart_init+0x254>
 356:	81 15       	cp	r24, r1
 358:	22 ec       	ldi	r18, 0xC2	; 194
 35a:	92 07       	cpc	r25, r18
 35c:	21 e0       	ldi	r18, 0x01	; 1
 35e:	a2 07       	cpc	r26, r18
 360:	b1 05       	cpc	r27, r1
 362:	09 f4       	brne	.+2      	; 0x366 <uart_init+0xf8>
 364:	c1 c0       	rjmp	.+386    	; 0x4e8 <uart_init+0x27a>
 366:	d2 c0       	rjmp	.+420    	; 0x50c <uart_init+0x29e>
		case 1200:
			UART_SET_DOUBLE_SPEED();
 368:	80 ec       	ldi	r24, 0xC0	; 192
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	20 ec       	ldi	r18, 0xC0	; 192
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	f9 01       	movw	r30, r18
 372:	20 81       	ld	r18, Z
 374:	22 60       	ori	r18, 0x02	; 2
 376:	fc 01       	movw	r30, r24
 378:	20 83       	st	Z, r18
			UART_SET_UBRR(1041);
 37a:	85 ec       	ldi	r24, 0xC5	; 197
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	24 e0       	ldi	r18, 0x04	; 4
 380:	fc 01       	movw	r30, r24
 382:	20 83       	st	Z, r18
 384:	84 ec       	ldi	r24, 0xC4	; 196
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	21 e1       	ldi	r18, 0x11	; 17
 38a:	fc 01       	movw	r30, r24
 38c:	20 83       	st	Z, r18
			break;
 38e:	be c0       	rjmp	.+380    	; 0x50c <uart_init+0x29e>
		case 2400:
			UART_SET_DOUBLE_SPEED();
 390:	80 ec       	ldi	r24, 0xC0	; 192
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	20 ec       	ldi	r18, 0xC0	; 192
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	f9 01       	movw	r30, r18
 39a:	20 81       	ld	r18, Z
 39c:	22 60       	ori	r18, 0x02	; 2
 39e:	fc 01       	movw	r30, r24
 3a0:	20 83       	st	Z, r18
			UART_SET_UBRR(520);
 3a2:	85 ec       	ldi	r24, 0xC5	; 197
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	22 e0       	ldi	r18, 0x02	; 2
 3a8:	fc 01       	movw	r30, r24
 3aa:	20 83       	st	Z, r18
 3ac:	84 ec       	ldi	r24, 0xC4	; 196
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	28 e0       	ldi	r18, 0x08	; 8
 3b2:	fc 01       	movw	r30, r24
 3b4:	20 83       	st	Z, r18
			break;
 3b6:	aa c0       	rjmp	.+340    	; 0x50c <uart_init+0x29e>
		case 4800:
			UART_SET_SINGLE_SPEED();
 3b8:	80 ec       	ldi	r24, 0xC0	; 192
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	20 ec       	ldi	r18, 0xC0	; 192
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	f9 01       	movw	r30, r18
 3c2:	20 81       	ld	r18, Z
 3c4:	2d 7f       	andi	r18, 0xFD	; 253
 3c6:	fc 01       	movw	r30, r24
 3c8:	20 83       	st	Z, r18
			UART_SET_UBRR(129);
 3ca:	85 ec       	ldi	r24, 0xC5	; 197
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	fc 01       	movw	r30, r24
 3d0:	10 82       	st	Z, r1
 3d2:	84 ec       	ldi	r24, 0xC4	; 196
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	21 e8       	ldi	r18, 0x81	; 129
 3d8:	fc 01       	movw	r30, r24
 3da:	20 83       	st	Z, r18
			break;
 3dc:	97 c0       	rjmp	.+302    	; 0x50c <uart_init+0x29e>
		case 9600:
			//UBRR0H = (unsigned char)(51>>8);
			//UBRR0L = (unsigned char)(51 & 0xff);
			UART_SET_SINGLE_SPEED();
 3de:	80 ec       	ldi	r24, 0xC0	; 192
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	20 ec       	ldi	r18, 0xC0	; 192
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	f9 01       	movw	r30, r18
 3e8:	20 81       	ld	r18, Z
 3ea:	2d 7f       	andi	r18, 0xFD	; 253
 3ec:	fc 01       	movw	r30, r24
 3ee:	20 83       	st	Z, r18
			UART_SET_UBRR(64);
 3f0:	85 ec       	ldi	r24, 0xC5	; 197
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	fc 01       	movw	r30, r24
 3f6:	10 82       	st	Z, r1
 3f8:	84 ec       	ldi	r24, 0xC4	; 196
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	20 e4       	ldi	r18, 0x40	; 64
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18
			break;
 402:	84 c0       	rjmp	.+264    	; 0x50c <uart_init+0x29e>
		case 14400:
			UART_SET_DOUBLE_SPEED();
 404:	80 ec       	ldi	r24, 0xC0	; 192
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	20 ec       	ldi	r18, 0xC0	; 192
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	f9 01       	movw	r30, r18
 40e:	20 81       	ld	r18, Z
 410:	22 60       	ori	r18, 0x02	; 2
 412:	fc 01       	movw	r30, r24
 414:	20 83       	st	Z, r18
			UART_SET_UBRR(86);
 416:	85 ec       	ldi	r24, 0xC5	; 197
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	fc 01       	movw	r30, r24
 41c:	10 82       	st	Z, r1
 41e:	84 ec       	ldi	r24, 0xC4	; 196
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	26 e5       	ldi	r18, 0x56	; 86
 424:	fc 01       	movw	r30, r24
 426:	20 83       	st	Z, r18
			break;
 428:	71 c0       	rjmp	.+226    	; 0x50c <uart_init+0x29e>
		case 19200:
			UART_SET_DOUBLE_SPEED();
 42a:	80 ec       	ldi	r24, 0xC0	; 192
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	20 ec       	ldi	r18, 0xC0	; 192
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	f9 01       	movw	r30, r18
 434:	20 81       	ld	r18, Z
 436:	22 60       	ori	r18, 0x02	; 2
 438:	fc 01       	movw	r30, r24
 43a:	20 83       	st	Z, r18
			UART_SET_UBRR(64);
 43c:	85 ec       	ldi	r24, 0xC5	; 197
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	fc 01       	movw	r30, r24
 442:	10 82       	st	Z, r1
 444:	84 ec       	ldi	r24, 0xC4	; 196
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	20 e4       	ldi	r18, 0x40	; 64
 44a:	fc 01       	movw	r30, r24
 44c:	20 83       	st	Z, r18
			break;
 44e:	5e c0       	rjmp	.+188    	; 0x50c <uart_init+0x29e>
		case 28800:
			UART_SET_DOUBLE_SPEED();
 450:	80 ec       	ldi	r24, 0xC0	; 192
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	20 ec       	ldi	r18, 0xC0	; 192
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	f9 01       	movw	r30, r18
 45a:	20 81       	ld	r18, Z
 45c:	22 60       	ori	r18, 0x02	; 2
 45e:	fc 01       	movw	r30, r24
 460:	20 83       	st	Z, r18
			UART_SET_UBRR(42);
 462:	85 ec       	ldi	r24, 0xC5	; 197
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	fc 01       	movw	r30, r24
 468:	10 82       	st	Z, r1
 46a:	84 ec       	ldi	r24, 0xC4	; 196
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	2a e2       	ldi	r18, 0x2A	; 42
 470:	fc 01       	movw	r30, r24
 472:	20 83       	st	Z, r18
			break;
 474:	4b c0       	rjmp	.+150    	; 0x50c <uart_init+0x29e>
		case 38400:
			UART_SET_DOUBLE_SPEED();
 476:	80 ec       	ldi	r24, 0xC0	; 192
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	20 ec       	ldi	r18, 0xC0	; 192
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	f9 01       	movw	r30, r18
 480:	20 81       	ld	r18, Z
 482:	22 60       	ori	r18, 0x02	; 2
 484:	fc 01       	movw	r30, r24
 486:	20 83       	st	Z, r18
			UART_SET_UBRR(32);
 488:	85 ec       	ldi	r24, 0xC5	; 197
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	fc 01       	movw	r30, r24
 48e:	10 82       	st	Z, r1
 490:	84 ec       	ldi	r24, 0xC4	; 196
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	20 e2       	ldi	r18, 0x20	; 32
 496:	fc 01       	movw	r30, r24
 498:	20 83       	st	Z, r18
			break;
 49a:	38 c0       	rjmp	.+112    	; 0x50c <uart_init+0x29e>
		case 57600:
			UART_SET_DOUBLE_SPEED();
 49c:	80 ec       	ldi	r24, 0xC0	; 192
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	20 ec       	ldi	r18, 0xC0	; 192
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	f9 01       	movw	r30, r18
 4a6:	20 81       	ld	r18, Z
 4a8:	22 60       	ori	r18, 0x02	; 2
 4aa:	fc 01       	movw	r30, r24
 4ac:	20 83       	st	Z, r18
			UART_SET_UBRR(21);
 4ae:	85 ec       	ldi	r24, 0xC5	; 197
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	fc 01       	movw	r30, r24
 4b4:	10 82       	st	Z, r1
 4b6:	84 ec       	ldi	r24, 0xC4	; 196
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	25 e1       	ldi	r18, 0x15	; 21
 4bc:	fc 01       	movw	r30, r24
 4be:	20 83       	st	Z, r18
			break;
 4c0:	25 c0       	rjmp	.+74     	; 0x50c <uart_init+0x29e>
		case 76800:
			UART_SET_SINGLE_SPEED();
 4c2:	80 ec       	ldi	r24, 0xC0	; 192
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	20 ec       	ldi	r18, 0xC0	; 192
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	f9 01       	movw	r30, r18
 4cc:	20 81       	ld	r18, Z
 4ce:	2d 7f       	andi	r18, 0xFD	; 253
 4d0:	fc 01       	movw	r30, r24
 4d2:	20 83       	st	Z, r18
			UART_SET_UBRR(7);
 4d4:	85 ec       	ldi	r24, 0xC5	; 197
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	fc 01       	movw	r30, r24
 4da:	10 82       	st	Z, r1
 4dc:	84 ec       	ldi	r24, 0xC4	; 196
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	27 e0       	ldi	r18, 0x07	; 7
 4e2:	fc 01       	movw	r30, r24
 4e4:	20 83       	st	Z, r18
			break;
 4e6:	12 c0       	rjmp	.+36     	; 0x50c <uart_init+0x29e>
		case 115200:
			//UBRR0H = (unsigned char)(3>>8);
			//UBRR0L = (unsigned char)(3 & 0xff);
			UART_SET_DOUBLE_SPEED();
 4e8:	80 ec       	ldi	r24, 0xC0	; 192
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	20 ec       	ldi	r18, 0xC0	; 192
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	f9 01       	movw	r30, r18
 4f2:	20 81       	ld	r18, Z
 4f4:	22 60       	ori	r18, 0x02	; 2
 4f6:	fc 01       	movw	r30, r24
 4f8:	20 83       	st	Z, r18
			UART_SET_UBRR(10);
 4fa:	85 ec       	ldi	r24, 0xC5	; 197
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	fc 01       	movw	r30, r24
 500:	10 82       	st	Z, r1
 502:	84 ec       	ldi	r24, 0xC4	; 196
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	2a e0       	ldi	r18, 0x0A	; 10
 508:	fc 01       	movw	r30, r24
 50a:	20 83       	st	Z, r18
	}
	
	// set the parity
	// (see pages 184-185 in the Atmega644 preliminary)
	UCSR0C &= ~((1 << UPM01) | (1 << UPM00));
 50c:	82 ec       	ldi	r24, 0xC2	; 194
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	22 ec       	ldi	r18, 0xC2	; 194
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	f9 01       	movw	r30, r18
 516:	20 81       	ld	r18, Z
 518:	2f 7c       	andi	r18, 0xCF	; 207
 51a:	fc 01       	movw	r30, r24
 51c:	20 83       	st	Z, r18
	switch(config->parity) {
 51e:	89 81       	ldd	r24, Y+1	; 0x01
 520:	9a 81       	ldd	r25, Y+2	; 0x02
 522:	fc 01       	movw	r30, r24
 524:	84 81       	ldd	r24, Z+4	; 0x04
 526:	88 2f       	mov	r24, r24
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	81 30       	cpi	r24, 0x01	; 1
 52c:	91 05       	cpc	r25, r1
 52e:	21 f0       	breq	.+8      	; 0x538 <uart_init+0x2ca>
 530:	82 30       	cpi	r24, 0x02	; 2
 532:	91 05       	cpc	r25, r1
 534:	59 f0       	breq	.+22     	; 0x54c <uart_init+0x2de>
		case NONE:
			break;
 536:	14 c0       	rjmp	.+40     	; 0x560 <uart_init+0x2f2>
		case EVEN:
			UCSR0C |= (1 << UPM01);
 538:	82 ec       	ldi	r24, 0xC2	; 194
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	22 ec       	ldi	r18, 0xC2	; 194
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	f9 01       	movw	r30, r18
 542:	20 81       	ld	r18, Z
 544:	20 62       	ori	r18, 0x20	; 32
 546:	fc 01       	movw	r30, r24
 548:	20 83       	st	Z, r18
			break;
 54a:	0a c0       	rjmp	.+20     	; 0x560 <uart_init+0x2f2>
		case ODD:
			UCSR0C |= ((1 << UPM01) | (1 << UPM00));
 54c:	82 ec       	ldi	r24, 0xC2	; 194
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	22 ec       	ldi	r18, 0xC2	; 194
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	f9 01       	movw	r30, r18
 556:	20 81       	ld	r18, Z
 558:	20 63       	ori	r18, 0x30	; 48
 55a:	fc 01       	movw	r30, r24
 55c:	20 83       	st	Z, r18
			break;
 55e:	00 00       	nop
	}

	// set the number of data bits
	// (see pages 184-185 in the Atmega644 preliminary)
	UCSR0B &= ~(1 << UCSZ02); 
 560:	81 ec       	ldi	r24, 0xC1	; 193
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	21 ec       	ldi	r18, 0xC1	; 193
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	f9 01       	movw	r30, r18
 56a:	20 81       	ld	r18, Z
 56c:	2b 7f       	andi	r18, 0xFB	; 251
 56e:	fc 01       	movw	r30, r24
 570:	20 83       	st	Z, r18
	UCSR0C &= ~((1 << UCSZ01) | (1 << UCSZ00));
 572:	82 ec       	ldi	r24, 0xC2	; 194
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	22 ec       	ldi	r18, 0xC2	; 194
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	f9 01       	movw	r30, r18
 57c:	20 81       	ld	r18, Z
 57e:	29 7f       	andi	r18, 0xF9	; 249
 580:	fc 01       	movw	r30, r24
 582:	20 83       	st	Z, r18
	switch(config->data_bits) {
 584:	89 81       	ldd	r24, Y+1	; 0x01
 586:	9a 81       	ldd	r25, Y+2	; 0x02
 588:	fc 01       	movw	r30, r24
 58a:	85 81       	ldd	r24, Z+5	; 0x05
 58c:	88 2f       	mov	r24, r24
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	87 30       	cpi	r24, 0x07	; 7
 592:	91 05       	cpc	r25, r1
 594:	e1 f0       	breq	.+56     	; 0x5ce <uart_init+0x360>
 596:	88 30       	cpi	r24, 0x08	; 8
 598:	91 05       	cpc	r25, r1
 59a:	44 f4       	brge	.+16     	; 0x5ac <uart_init+0x33e>
 59c:	85 30       	cpi	r24, 0x05	; 5
 59e:	91 05       	cpc	r25, r1
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <uart_init+0x336>
 5a2:	4e c0       	rjmp	.+156    	; 0x640 <uart_init+0x3d2>
 5a4:	86 30       	cpi	r24, 0x06	; 6
 5a6:	91 05       	cpc	r25, r1
 5a8:	41 f0       	breq	.+16     	; 0x5ba <uart_init+0x34c>
 5aa:	4b c0       	rjmp	.+150    	; 0x642 <uart_init+0x3d4>
 5ac:	88 30       	cpi	r24, 0x08	; 8
 5ae:	91 05       	cpc	r25, r1
 5b0:	c1 f0       	breq	.+48     	; 0x5e2 <uart_init+0x374>
 5b2:	89 30       	cpi	r24, 0x09	; 9
 5b4:	91 05       	cpc	r25, r1
 5b6:	41 f1       	breq	.+80     	; 0x608 <uart_init+0x39a>
 5b8:	44 c0       	rjmp	.+136    	; 0x642 <uart_init+0x3d4>
		case 5: 
			break;
		case 6:
			UCSR0C |= (1 << UCSZ00);
 5ba:	82 ec       	ldi	r24, 0xC2	; 194
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	22 ec       	ldi	r18, 0xC2	; 194
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	f9 01       	movw	r30, r18
 5c4:	20 81       	ld	r18, Z
 5c6:	22 60       	ori	r18, 0x02	; 2
 5c8:	fc 01       	movw	r30, r24
 5ca:	20 83       	st	Z, r18
			break;
 5cc:	3a c0       	rjmp	.+116    	; 0x642 <uart_init+0x3d4>
		case 7:
			UCSR0C |= (1 << UCSZ01);
 5ce:	82 ec       	ldi	r24, 0xC2	; 194
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	22 ec       	ldi	r18, 0xC2	; 194
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	f9 01       	movw	r30, r18
 5d8:	20 81       	ld	r18, Z
 5da:	24 60       	ori	r18, 0x04	; 4
 5dc:	fc 01       	movw	r30, r24
 5de:	20 83       	st	Z, r18
			break;
 5e0:	30 c0       	rjmp	.+96     	; 0x642 <uart_init+0x3d4>
		case 8:
			UCSR0C |= (1 << UCSZ01);
 5e2:	82 ec       	ldi	r24, 0xC2	; 194
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	22 ec       	ldi	r18, 0xC2	; 194
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	f9 01       	movw	r30, r18
 5ec:	20 81       	ld	r18, Z
 5ee:	24 60       	ori	r18, 0x04	; 4
 5f0:	fc 01       	movw	r30, r24
 5f2:	20 83       	st	Z, r18
			UCSR0C |= (1 << UCSZ00);
 5f4:	82 ec       	ldi	r24, 0xC2	; 194
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	22 ec       	ldi	r18, 0xC2	; 194
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	f9 01       	movw	r30, r18
 5fe:	20 81       	ld	r18, Z
 600:	22 60       	ori	r18, 0x02	; 2
 602:	fc 01       	movw	r30, r24
 604:	20 83       	st	Z, r18
			break;
 606:	1d c0       	rjmp	.+58     	; 0x642 <uart_init+0x3d4>
		case 9:
			UCSR0B |= (1 << UCSZ02);
 608:	81 ec       	ldi	r24, 0xC1	; 193
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	21 ec       	ldi	r18, 0xC1	; 193
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	f9 01       	movw	r30, r18
 612:	20 81       	ld	r18, Z
 614:	24 60       	ori	r18, 0x04	; 4
 616:	fc 01       	movw	r30, r24
 618:	20 83       	st	Z, r18
			UCSR0C |= (1 << UCSZ01);
 61a:	82 ec       	ldi	r24, 0xC2	; 194
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	22 ec       	ldi	r18, 0xC2	; 194
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	f9 01       	movw	r30, r18
 624:	20 81       	ld	r18, Z
 626:	24 60       	ori	r18, 0x04	; 4
 628:	fc 01       	movw	r30, r24
 62a:	20 83       	st	Z, r18
			UCSR0C |= (1 << UCSZ00);
 62c:	82 ec       	ldi	r24, 0xC2	; 194
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	22 ec       	ldi	r18, 0xC2	; 194
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	f9 01       	movw	r30, r18
 636:	20 81       	ld	r18, Z
 638:	22 60       	ori	r18, 0x02	; 2
 63a:	fc 01       	movw	r30, r24
 63c:	20 83       	st	Z, r18
			break;
 63e:	01 c0       	rjmp	.+2      	; 0x642 <uart_init+0x3d4>
	// (see pages 184-185 in the Atmega644 preliminary)
	UCSR0B &= ~(1 << UCSZ02); 
	UCSR0C &= ~((1 << UCSZ01) | (1 << UCSZ00));
	switch(config->data_bits) {
		case 5: 
			break;
 640:	00 00       	nop
			break;
	}

	// set the number of stop bits
	// (see pages 184-185 in the Atmega644 preliminary)
	switch(config->stop_bits) {
 642:	89 81       	ldd	r24, Y+1	; 0x01
 644:	9a 81       	ldd	r25, Y+2	; 0x02
 646:	fc 01       	movw	r30, r24
 648:	86 81       	ldd	r24, Z+6	; 0x06
 64a:	88 2f       	mov	r24, r24
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	81 30       	cpi	r24, 0x01	; 1
 650:	91 05       	cpc	r25, r1
 652:	21 f0       	breq	.+8      	; 0x65c <uart_init+0x3ee>
 654:	82 30       	cpi	r24, 0x02	; 2
 656:	91 05       	cpc	r25, r1
 658:	59 f0       	breq	.+22     	; 0x670 <uart_init+0x402>
 65a:	14 c0       	rjmp	.+40     	; 0x684 <uart_init+0x416>
		case 1:
			UCSR0C &= ~(1 << USBS0);
 65c:	82 ec       	ldi	r24, 0xC2	; 194
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	22 ec       	ldi	r18, 0xC2	; 194
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	f9 01       	movw	r30, r18
 666:	20 81       	ld	r18, Z
 668:	27 7f       	andi	r18, 0xF7	; 247
 66a:	fc 01       	movw	r30, r24
 66c:	20 83       	st	Z, r18
			break;
 66e:	0a c0       	rjmp	.+20     	; 0x684 <uart_init+0x416>
		case 2:
			UCSR0C |= (1 << USBS0);
 670:	82 ec       	ldi	r24, 0xC2	; 194
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	22 ec       	ldi	r18, 0xC2	; 194
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	f9 01       	movw	r30, r18
 67a:	20 81       	ld	r18, Z
 67c:	28 60       	ori	r18, 0x08	; 8
 67e:	fc 01       	movw	r30, r24
 680:	20 83       	st	Z, r18
			break;
 682:	00 00       	nop
	}

	// enable send and receive functionality
	// (overrides DDR settings)
	// (see page 197 in the Atmega644 preliminary)
	UCSR0B |= ((1 << TXEN0) | (1 << RXEN0));
 684:	81 ec       	ldi	r24, 0xC1	; 193
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	21 ec       	ldi	r18, 0xC1	; 193
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	f9 01       	movw	r30, r18
 68e:	20 81       	ld	r18, Z
 690:	28 61       	ori	r18, 0x18	; 24
 692:	fc 01       	movw	r30, r24
 694:	20 83       	st	Z, r18

	// note: when the library is updated to include support for
	// asynchronous transmission and reception (with completion
	// signals), the send and receive interrupts will need to
	// be enabled; see page 197 of the Atmega644 preliminary
}
 696:	0f 90       	pop	r0
 698:	0f 90       	pop	r0
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	08 95       	ret

000006a0 <uart_send_byte>:
	byte_transmitted = false;
}

// used to send a single byte through the UART
// requires: UART is initialized and awake
void uart_send_byte(uint8_t data) {
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	1f 92       	push	r1
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
 6aa:	89 83       	std	Y+1, r24	; 0x01
	// wait for the transmit buffer to be empty 
	while (!(UCSR0A & (1 << UDRE0)));
 6ac:	00 00       	nop
 6ae:	80 ec       	ldi	r24, 0xC0	; 192
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	fc 01       	movw	r30, r24
 6b4:	80 81       	ld	r24, Z
 6b6:	88 2f       	mov	r24, r24
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	80 72       	andi	r24, 0x20	; 32
 6bc:	99 27       	eor	r25, r25
 6be:	00 97       	sbiw	r24, 0x00	; 0
 6c0:	b1 f3       	breq	.-20     	; 0x6ae <uart_send_byte+0xe>
	
	// clear the transmit complete flag; 
	// copy data to the transmit buffer
	UCSR0A |= (1 << TXC0);
 6c2:	80 ec       	ldi	r24, 0xC0	; 192
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	20 ec       	ldi	r18, 0xC0	; 192
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	f9 01       	movw	r30, r18
 6cc:	20 81       	ld	r18, Z
 6ce:	20 64       	ori	r18, 0x40	; 64
 6d0:	fc 01       	movw	r30, r24
 6d2:	20 83       	st	Z, r18
	UDR0 = data;
 6d4:	86 ec       	ldi	r24, 0xC6	; 198
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	29 81       	ldd	r18, Y+1	; 0x01
 6da:	fc 01       	movw	r30, r24
 6dc:	20 83       	st	Z, r18

	// the transmit complete flag is scheduled to be set
	byte_transmitted = true;
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	80 93 27 01 	sts	0x0127, r24
}
 6e4:	0f 90       	pop	r0
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	08 95       	ret

000006ec <uart_send_bytes>:

// used to send count data bytes through the UART
// requires: UART is initialized and awake
void uart_send_bytes(uint8_t* data, uint8_t count) {
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	00 d0       	rcall	.+0      	; 0x6f2 <uart_send_bytes+0x6>
 6f2:	00 d0       	rcall	.+0      	; 0x6f4 <uart_send_bytes+0x8>
 6f4:	cd b7       	in	r28, 0x3d	; 61
 6f6:	de b7       	in	r29, 0x3e	; 62
 6f8:	9b 83       	std	Y+3, r25	; 0x03
 6fa:	8a 83       	std	Y+2, r24	; 0x02
 6fc:	6c 83       	std	Y+4, r22	; 0x04
	// transmit each byte of data
	uint8_t index = 0;
 6fe:	19 82       	std	Y+1, r1	; 0x01
	while(index < count) {
 700:	0e c0       	rjmp	.+28     	; 0x71e <uart_send_bytes+0x32>
		uart_send_byte(data[index]);
 702:	89 81       	ldd	r24, Y+1	; 0x01
 704:	88 2f       	mov	r24, r24
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	2a 81       	ldd	r18, Y+2	; 0x02
 70a:	3b 81       	ldd	r19, Y+3	; 0x03
 70c:	82 0f       	add	r24, r18
 70e:	93 1f       	adc	r25, r19
 710:	fc 01       	movw	r30, r24
 712:	80 81       	ld	r24, Z
 714:	0e 94 50 03 	call	0x6a0	; 0x6a0 <uart_send_byte>
		index++;
 718:	89 81       	ldd	r24, Y+1	; 0x01
 71a:	8f 5f       	subi	r24, 0xFF	; 255
 71c:	89 83       	std	Y+1, r24	; 0x01
// used to send count data bytes through the UART
// requires: UART is initialized and awake
void uart_send_bytes(uint8_t* data, uint8_t count) {
	// transmit each byte of data
	uint8_t index = 0;
	while(index < count) {
 71e:	99 81       	ldd	r25, Y+1	; 0x01
 720:	8c 81       	ldd	r24, Y+4	; 0x04
 722:	98 17       	cp	r25, r24
 724:	70 f3       	brcs	.-36     	; 0x702 <uart_send_bytes+0x16>
		uart_send_byte(data[index]);
		index++;
	}
}
 726:	0f 90       	pop	r0
 728:	0f 90       	pop	r0
 72a:	0f 90       	pop	r0
 72c:	0f 90       	pop	r0
 72e:	df 91       	pop	r29
 730:	cf 91       	pop	r28
 732:	08 95       	ret

00000734 <uart_send_string>:

// used to send a null-terminated character string 
// through the UART
// requires: UART is initialized and awake, strlen(string) <= 255
void uart_send_string(char* string) {
 734:	cf 93       	push	r28
 736:	df 93       	push	r29
 738:	00 d0       	rcall	.+0      	; 0x73a <uart_send_string+0x6>
 73a:	cd b7       	in	r28, 0x3d	; 61
 73c:	de b7       	in	r29, 0x3e	; 62
 73e:	9a 83       	std	Y+2, r25	; 0x02
 740:	89 83       	std	Y+1, r24	; 0x01
	uart_send_bytes((uint8_t*) string, strlen(string));
 742:	89 81       	ldd	r24, Y+1	; 0x01
 744:	9a 81       	ldd	r25, Y+2	; 0x02
 746:	0e 94 b0 03 	call	0x760	; 0x760 <strlen>
 74a:	28 2f       	mov	r18, r24
 74c:	89 81       	ldd	r24, Y+1	; 0x01
 74e:	9a 81       	ldd	r25, Y+2	; 0x02
 750:	62 2f       	mov	r22, r18
 752:	0e 94 76 03 	call	0x6ec	; 0x6ec <uart_send_bytes>
}
 756:	0f 90       	pop	r0
 758:	0f 90       	pop	r0
 75a:	df 91       	pop	r29
 75c:	cf 91       	pop	r28
 75e:	08 95       	ret

00000760 <strlen>:
 760:	fc 01       	movw	r30, r24
 762:	01 90       	ld	r0, Z+
 764:	00 20       	and	r0, r0
 766:	e9 f7       	brne	.-6      	; 0x762 <strlen+0x2>
 768:	80 95       	com	r24
 76a:	90 95       	com	r25
 76c:	8e 0f       	add	r24, r30
 76e:	9f 1f       	adc	r25, r31
 770:	08 95       	ret

00000772 <itoa>:
 772:	fb 01       	movw	r30, r22
 774:	9f 01       	movw	r18, r30
 776:	e8 94       	clt
 778:	42 30       	cpi	r20, 0x02	; 2
 77a:	c4 f0       	brlt	.+48     	; 0x7ac <itoa+0x3a>
 77c:	45 32       	cpi	r20, 0x25	; 37
 77e:	b4 f4       	brge	.+44     	; 0x7ac <itoa+0x3a>
 780:	4a 30       	cpi	r20, 0x0A	; 10
 782:	29 f4       	brne	.+10     	; 0x78e <itoa+0x1c>
 784:	97 fb       	bst	r25, 7
 786:	1e f4       	brtc	.+6      	; 0x78e <itoa+0x1c>
 788:	90 95       	com	r25
 78a:	81 95       	neg	r24
 78c:	9f 4f       	sbci	r25, 0xFF	; 255
 78e:	64 2f       	mov	r22, r20
 790:	77 27       	eor	r23, r23
 792:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__udivmodhi4>
 796:	80 5d       	subi	r24, 0xD0	; 208
 798:	8a 33       	cpi	r24, 0x3A	; 58
 79a:	0c f0       	brlt	.+2      	; 0x79e <itoa+0x2c>
 79c:	89 5d       	subi	r24, 0xD9	; 217
 79e:	81 93       	st	Z+, r24
 7a0:	cb 01       	movw	r24, r22
 7a2:	00 97       	sbiw	r24, 0x00	; 0
 7a4:	a1 f7       	brne	.-24     	; 0x78e <itoa+0x1c>
 7a6:	16 f4       	brtc	.+4      	; 0x7ac <itoa+0x3a>
 7a8:	5d e2       	ldi	r21, 0x2D	; 45
 7aa:	51 93       	st	Z+, r21
 7ac:	10 82       	st	Z, r1
 7ae:	c9 01       	movw	r24, r18
 7b0:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <strrev>

000007b4 <strrev>:
 7b4:	dc 01       	movw	r26, r24
 7b6:	fc 01       	movw	r30, r24
 7b8:	67 2f       	mov	r22, r23
 7ba:	71 91       	ld	r23, Z+
 7bc:	77 23       	and	r23, r23
 7be:	e1 f7       	brne	.-8      	; 0x7b8 <strrev+0x4>
 7c0:	32 97       	sbiw	r30, 0x02	; 2
 7c2:	04 c0       	rjmp	.+8      	; 0x7cc <strrev+0x18>
 7c4:	7c 91       	ld	r23, X
 7c6:	6d 93       	st	X+, r22
 7c8:	70 83       	st	Z, r23
 7ca:	62 91       	ld	r22, -Z
 7cc:	ae 17       	cp	r26, r30
 7ce:	bf 07       	cpc	r27, r31
 7d0:	c8 f3       	brcs	.-14     	; 0x7c4 <strrev+0x10>
 7d2:	08 95       	ret

000007d4 <__udivmodhi4>:
 7d4:	aa 1b       	sub	r26, r26
 7d6:	bb 1b       	sub	r27, r27
 7d8:	51 e1       	ldi	r21, 0x11	; 17
 7da:	07 c0       	rjmp	.+14     	; 0x7ea <__udivmodhi4_ep>

000007dc <__udivmodhi4_loop>:
 7dc:	aa 1f       	adc	r26, r26
 7de:	bb 1f       	adc	r27, r27
 7e0:	a6 17       	cp	r26, r22
 7e2:	b7 07       	cpc	r27, r23
 7e4:	10 f0       	brcs	.+4      	; 0x7ea <__udivmodhi4_ep>
 7e6:	a6 1b       	sub	r26, r22
 7e8:	b7 0b       	sbc	r27, r23

000007ea <__udivmodhi4_ep>:
 7ea:	88 1f       	adc	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	5a 95       	dec	r21
 7f0:	a9 f7       	brne	.-22     	; 0x7dc <__udivmodhi4_loop>
 7f2:	80 95       	com	r24
 7f4:	90 95       	com	r25
 7f6:	bc 01       	movw	r22, r24
 7f8:	cd 01       	movw	r24, r26
 7fa:	08 95       	ret

000007fc <_exit>:
 7fc:	f8 94       	cli

000007fe <__stop_program>:
 7fe:	ff cf       	rjmp	.-2      	; 0x7fe <__stop_program>
