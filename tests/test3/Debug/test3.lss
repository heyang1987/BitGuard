
test3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000206  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  0000027a  2**0
                  ALLOC
  2 .stab         00000b28  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000780  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_18>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d0 e1       	ldi	r29, 0x10	; 16
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 e0       	ldi	r30, 0x06	; 6
  84:	f2 e0       	ldi	r31, 0x02	; 2
  86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
  8c:	a0 30       	cpi	r26, 0x00	; 0
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 30       	cpi	r26, 0x04	; 4
  9e:	b1 07       	cpc	r27, r17
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  a6:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000ae <__vector_18>:
uint32_t system_time;

void a();

ISR(TIMER0_OVF_vect) {
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	af 93       	push	r26
  be:	bf 93       	push	r27
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
	 system_time++;
  c8:	80 91 00 01 	lds	r24, 0x0100
  cc:	90 91 01 01 	lds	r25, 0x0101
  d0:	a0 91 02 01 	lds	r26, 0x0102
  d4:	b0 91 03 01 	lds	r27, 0x0103
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	a1 1d       	adc	r26, r1
  dc:	b1 1d       	adc	r27, r1
  de:	80 93 00 01 	sts	0x0100, r24
  e2:	90 93 01 01 	sts	0x0101, r25
  e6:	a0 93 02 01 	sts	0x0102, r26
  ea:	b0 93 03 01 	sts	0x0103, r27
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	bf 91       	pop	r27
  f4:	af 91       	pop	r26
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <__vector_1>:
}


ISR(INT0_vect){
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	22 97       	sbiw	r28, 0x02	; 2
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	cd bf       	out	0x3d, r28	; 61
	uint16_t j = 1;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	9a 83       	std	Y+2, r25	; 0x02
 126:	89 83       	std	Y+1, r24	; 0x01
	j++;
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	9a 81       	ldd	r25, Y+2	; 0x02
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	9a 83       	std	Y+2, r25	; 0x02
 130:	89 83       	std	Y+1, r24	; 0x01
 132:	22 96       	adiw	r28, 0x02	; 2
 134:	f8 94       	cli
 136:	de bf       	out	0x3e, r29	; 62
 138:	cd bf       	out	0x3d, r28	; 61
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <main>:
}

int main(void){
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	24 97       	sbiw	r28, 0x04	; 4
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
	system_time = 0;
 160:	10 92 00 01 	sts	0x0100, r1
 164:	10 92 01 01 	sts	0x0101, r1
 168:	10 92 02 01 	sts	0x0102, r1
 16c:	10 92 03 01 	sts	0x0103, r1
	// Initialize timer0.
	TIMSK0 |= (1<<TOIE0);	// Enable timer0 interrupt
 170:	ae e6       	ldi	r26, 0x6E	; 110
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	ee e6       	ldi	r30, 0x6E	; 110
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	8c 93       	st	X, r24
	TCCR0B |= (1<<CS00);	// No prescaler
 17e:	a5 e4       	ldi	r26, 0x45	; 69
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	e5 e4       	ldi	r30, 0x45	; 69
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	8c 93       	st	X, r24
	
	// INT0
	DDRD &= ~(1<<2);
 18c:	aa e2       	ldi	r26, 0x2A	; 42
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	ea e2       	ldi	r30, 0x2A	; 42
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8b 7f       	andi	r24, 0xFB	; 251
 198:	8c 93       	st	X, r24
	PORTD |= (1<<2);
 19a:	ab e2       	ldi	r26, 0x2B	; 43
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	eb e2       	ldi	r30, 0x2B	; 43
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	84 60       	ori	r24, 0x04	; 4
 1a6:	8c 93       	st	X, r24
	EIMSK |= (1<<INT0);	// Enable INT0
 1a8:	ad e3       	ldi	r26, 0x3D	; 61
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	ed e3       	ldi	r30, 0x3D	; 61
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	81 60       	ori	r24, 0x01	; 1
 1b4:	8c 93       	st	X, r24
	EICRA = 0x00;	// The low level of INT0 and INT1 generates an interrupt request.
 1b6:	e9 e6       	ldi	r30, 0x69	; 105
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	10 82       	st	Z, r1

	// Enable interrupt.
	sei();
 1bc:	78 94       	sei

	uint16_t i;
	i = 100;
 1be:	84 e6       	ldi	r24, 0x64	; 100
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	9c 83       	std	Y+4, r25	; 0x04
 1c4:	8b 83       	std	Y+3, r24	; 0x03
	int j;	
	j=300;
 1c6:	8c e2       	ldi	r24, 0x2C	; 44
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	9a 83       	std	Y+2, r25	; 0x02
 1cc:	89 83       	std	Y+1, r24	; 0x01
	a(); 
 1ce:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <a>

	while(1){}   
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <main+0x86>

000001d4 <a>:
}

void a(){
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	21 97       	sbiw	r28, 0x01	; 1
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	f8 94       	cli
 1e2:	de bf       	out	0x3e, r29	; 62
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 9;
 1e8:	89 e0       	ldi	r24, 0x09	; 9
 1ea:	89 83       	std	Y+1, r24	; 0x01
	i++;
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	8f 5f       	subi	r24, 0xFF	; 255
 1f0:	89 83       	std	Y+1, r24	; 0x01
 1f2:	21 96       	adiw	r28, 0x01	; 1
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	f8 94       	cli
 1f8:	de bf       	out	0x3e, r29	; 62
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	cd bf       	out	0x3d, r28	; 61
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <_exit>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <_exit>
