
test4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  00000314  2**0
                  ALLOC
  2 .stab         00000c00  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000080a  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_18>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d0 e1       	ldi	r29, 0x10	; 16
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 ea       	ldi	r30, 0xA0	; 160
  84:	f2 e0       	ldi	r31, 0x02	; 2
  86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
  8c:	a0 30       	cpi	r26, 0x00	; 0
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 30       	cpi	r26, 0x04	; 4
  9e:	b1 07       	cpc	r27, r17
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  a6:	0c 94 4f 01 	jmp	0x29e	; 0x29e <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000ae <__vector_18>:

void a();
int c(char a, uint16_t b, int c);

ISR(TIMER0_OVF_vect) {
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	af 93       	push	r26
  be:	bf 93       	push	r27
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
	 system_time++;
  c8:	80 91 00 01 	lds	r24, 0x0100
  cc:	90 91 01 01 	lds	r25, 0x0101
  d0:	a0 91 02 01 	lds	r26, 0x0102
  d4:	b0 91 03 01 	lds	r27, 0x0103
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	a1 1d       	adc	r26, r1
  dc:	b1 1d       	adc	r27, r1
  de:	80 93 00 01 	sts	0x0100, r24
  e2:	90 93 01 01 	sts	0x0101, r25
  e6:	a0 93 02 01 	sts	0x0102, r26
  ea:	b0 93 03 01 	sts	0x0103, r27
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	bf 91       	pop	r27
  f4:	af 91       	pop	r26
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <__vector_1>:
}


ISR(INT0_vect){
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	2f 93       	push	r18
 110:	3f 93       	push	r19
 112:	4f 93       	push	r20
 114:	5f 93       	push	r21
 116:	6f 93       	push	r22
 118:	7f 93       	push	r23
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
 12e:	23 97       	sbiw	r28, 0x03	; 3
 130:	de bf       	out	0x3e, r29	; 62
 132:	cd bf       	out	0x3d, r28	; 61
	int i = 1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	9b 83       	std	Y+3, r25	; 0x03
 13a:	8a 83       	std	Y+2, r24	; 0x02
	char j = 2;
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	89 83       	std	Y+1, r24	; 0x01
	c(j, 10, i);
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	9b 81       	ldd	r25, Y+3	; 0x03
 144:	ac 01       	movw	r20, r24
 146:	6a e0       	ldi	r22, 0x0A	; 10
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	0e 94 1b 01 	call	0x236	; 0x236 <c>
 150:	23 96       	adiw	r28, 0x03	; 3
 152:	f8 94       	cli
 154:	de bf       	out	0x3e, r29	; 62
 156:	cd bf       	out	0x3d, r28	; 61
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <main>:
}

int main(void){
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
 186:	24 97       	sbiw	r28, 0x04	; 4
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	f8 94       	cli
 18c:	de bf       	out	0x3e, r29	; 62
 18e:	0f be       	out	0x3f, r0	; 63
 190:	cd bf       	out	0x3d, r28	; 61
	system_time = 0;
 192:	10 92 00 01 	sts	0x0100, r1
 196:	10 92 01 01 	sts	0x0101, r1
 19a:	10 92 02 01 	sts	0x0102, r1
 19e:	10 92 03 01 	sts	0x0103, r1
	// Initialize timer0.
	TIMSK0 |= (1<<TOIE0);	// Enable timer0 interrupt
 1a2:	ae e6       	ldi	r26, 0x6E	; 110
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	ee e6       	ldi	r30, 0x6E	; 110
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	8c 93       	st	X, r24
	TCCR0B |= (1<<CS00);	// No prescaler
 1b0:	a5 e4       	ldi	r26, 0x45	; 69
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	e5 e4       	ldi	r30, 0x45	; 69
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	81 60       	ori	r24, 0x01	; 1
 1bc:	8c 93       	st	X, r24
	
	// INT0
	DDRD &= ~(1<<2);
 1be:	aa e2       	ldi	r26, 0x2A	; 42
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	ea e2       	ldi	r30, 0x2A	; 42
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	8b 7f       	andi	r24, 0xFB	; 251
 1ca:	8c 93       	st	X, r24
	PORTD |= (1<<2);
 1cc:	ab e2       	ldi	r26, 0x2B	; 43
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	eb e2       	ldi	r30, 0x2B	; 43
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	84 60       	ori	r24, 0x04	; 4
 1d8:	8c 93       	st	X, r24
	EIMSK |= (1<<INT0);	// Enable INT0
 1da:	ad e3       	ldi	r26, 0x3D	; 61
 1dc:	b0 e0       	ldi	r27, 0x00	; 0
 1de:	ed e3       	ldi	r30, 0x3D	; 61
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	81 60       	ori	r24, 0x01	; 1
 1e6:	8c 93       	st	X, r24
	EICRA = 0x00;	// The low level of INT0 and INT1 generates an interrupt request.
 1e8:	e9 e6       	ldi	r30, 0x69	; 105
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	10 82       	st	Z, r1

	// Enable interrupt.
	sei();
 1ee:	78 94       	sei

	uint16_t i;
	i = 100;
 1f0:	84 e6       	ldi	r24, 0x64	; 100
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	9c 83       	std	Y+4, r25	; 0x04
 1f6:	8b 83       	std	Y+3, r24	; 0x03
	int j;	
	j=300;
 1f8:	8c e2       	ldi	r24, 0x2C	; 44
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	9a 83       	std	Y+2, r25	; 0x02
 1fe:	89 83       	std	Y+1, r24	; 0x01
	a(); 
 200:	0e 94 03 01 	call	0x206	; 0x206 <a>

	while(1){}   
 204:	ff cf       	rjmp	.-2      	; 0x204 <main+0x86>

00000206 <a>:
}

void a(){
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
 20e:	21 97       	sbiw	r28, 0x01	; 1
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	f8 94       	cli
 214:	de bf       	out	0x3e, r29	; 62
 216:	0f be       	out	0x3f, r0	; 63
 218:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 9;
 21a:	89 e0       	ldi	r24, 0x09	; 9
 21c:	89 83       	std	Y+1, r24	; 0x01
	i++;
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	8f 5f       	subi	r24, 0xFF	; 255
 222:	89 83       	std	Y+1, r24	; 0x01
 224:	21 96       	adiw	r28, 0x01	; 1
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	f8 94       	cli
 22a:	de bf       	out	0x3e, r29	; 62
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	cd bf       	out	0x3d, r28	; 61
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <c>:
}

int c(char a, uint16_t b, int c){
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	cd b7       	in	r28, 0x3d	; 61
 23c:	de b7       	in	r29, 0x3e	; 62
 23e:	2b 97       	sbiw	r28, 0x0b	; 11
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	f8 94       	cli
 244:	de bf       	out	0x3e, r29	; 62
 246:	0f be       	out	0x3f, r0	; 63
 248:	cd bf       	out	0x3d, r28	; 61
 24a:	8f 83       	std	Y+7, r24	; 0x07
 24c:	79 87       	std	Y+9, r23	; 0x09
 24e:	68 87       	std	Y+8, r22	; 0x08
 250:	5b 87       	std	Y+11, r21	; 0x0b
 252:	4a 87       	std	Y+10, r20	; 0x0a
	int x,y,z;
	x=a+c;
 254:	8f 81       	ldd	r24, Y+7	; 0x07
 256:	28 2f       	mov	r18, r24
 258:	33 27       	eor	r19, r19
 25a:	8a 85       	ldd	r24, Y+10	; 0x0a
 25c:	9b 85       	ldd	r25, Y+11	; 0x0b
 25e:	82 0f       	add	r24, r18
 260:	93 1f       	adc	r25, r19
 262:	9e 83       	std	Y+6, r25	; 0x06
 264:	8d 83       	std	Y+5, r24	; 0x05
	y=c-a;
 266:	8f 81       	ldd	r24, Y+7	; 0x07
 268:	28 2f       	mov	r18, r24
 26a:	33 27       	eor	r19, r19
 26c:	8a 85       	ldd	r24, Y+10	; 0x0a
 26e:	9b 85       	ldd	r25, Y+11	; 0x0b
 270:	82 1b       	sub	r24, r18
 272:	93 0b       	sbc	r25, r19
 274:	9c 83       	std	Y+4, r25	; 0x04
 276:	8b 83       	std	Y+3, r24	; 0x03
	z=x+y;
 278:	2d 81       	ldd	r18, Y+5	; 0x05
 27a:	3e 81       	ldd	r19, Y+6	; 0x06
 27c:	8b 81       	ldd	r24, Y+3	; 0x03
 27e:	9c 81       	ldd	r25, Y+4	; 0x04
 280:	82 0f       	add	r24, r18
 282:	93 1f       	adc	r25, r19
 284:	9a 83       	std	Y+2, r25	; 0x02
 286:	89 83       	std	Y+1, r24	; 0x01
	return z;
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	9a 81       	ldd	r25, Y+2	; 0x02
 28c:	2b 96       	adiw	r28, 0x0b	; 11
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	de bf       	out	0x3e, r29	; 62
 294:	0f be       	out	0x3f, r0	; 63
 296:	cd bf       	out	0x3d, r28	; 61
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <_exit>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <_exit>
