Archive member included because of file (symbol)

/usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a(_exit.o)
                              /usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/crtm644p.o (exit)
/usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a(_copy_data.o)
                              sendNum.o (__do_copy_data)
/usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a(_clear_bss.o)
                              sendNum.o (__do_clear_bss)
/usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/libc.a(strcpy.o)
                              sendNum.o (strcpy)

Allocating common symbols
Common symbol       size              file

pp2                 0x1               sendNum.o

Discarded input sections

 .bss           0x0000000000000000        0x0 /usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/crtm644p.o
 .stabstr       0x0000000000000000        0x0 /usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/crtm644p.o
 .text          0x0000000000000000        0x0 sendNum.o
 .bss           0x0000000000000000        0x0 sendNum.o
 .data.pre      0x0000000000000000        0x0 sendNum.o
 .bss.counter   0x0000000000000000        0x0 sendNum.o
 .bss.num       0x0000000000000000        0x0 sendNum.o
 .text          0x0000000000000000        0x0 uart.o
 .bss           0x0000000000000000        0x0 uart.o
 .stabstr       0x0000000000000000        0x0 uart.o
 .text.uart_wake
                0x0000000000000000        0x0 uart.o
 .text.uart_sleep
                0x0000000000000000        0x0 uart.o
 .text.uart_receive_byte
                0x0000000000000000        0x0 uart.o
 .text.uart_receive_bytes
                0x0000000000000000        0x0 uart.o
 .text.uart_receive_block
                0x0000000000000000        0x0 uart.o
 .text.uart_match_token
                0x0000000000000000        0x0 uart.o
 .text.uart_flush_rx
                0x0000000000000000        0x0 uart.o
 .text.uart_receive_match_token
                0x0000000000000000        0x0 uart.o
 .text          0x0000000000000000        0x0 /usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a(_exit.o)
 .bss           0x0000000000000000        0x0 /usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x0000000000000000        0x0 /usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a(_exit.o)
 .text          0x0000000000000000        0x0 /usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a(_copy_data.o)
 .bss           0x0000000000000000        0x0 /usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc   0x0000000000000000        0x0 /usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a(_copy_data.o)
 .text          0x0000000000000000        0x0 /usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a(_clear_bss.o)
 .bss           0x0000000000000000        0x0 /usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc   0x0000000000000000        0x0 /usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a(_clear_bss.o)
 .text          0x0000000000000000        0x0 /usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/libc.a(strcpy.o)
 .bss           0x0000000000000000        0x0 /usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/libc.a(strcpy.o)
 .stabstr       0x0000000000000000        0x0 /usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/libc.a(strcpy.o)

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000020000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/crtm644p.o
LOAD sendNum.o
LOAD uart.o
START GROUP
LOAD /usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/libm.a
END GROUP
LOAD /usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a
LOAD /usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/libc.a
LOAD /usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x722
 *(.vectors)
 .vectors       0x0000000000000000       0x7c /usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/crtm644p.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x000000000000007c                . = ALIGN (0x2)
                0x000000000000007c                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x000000000000007c        0x0 linker stubs
 *(.trampolines*)
                0x000000000000007c                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x000000000000007c                __ctors_start = .
 *(.ctors)
                0x000000000000007c                __ctors_end = .
                0x000000000000007c                __dtors_start = .
 *(.dtors)
                0x000000000000007c                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x000000000000007c        0x0 /usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/crtm644p.o
                0x000000000000007c                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x000000000000007c        0xc /usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/crtm644p.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000000088       0x16 /usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a(_copy_data.o)
                0x0000000000000088                __do_copy_data
 .init4         0x000000000000009e       0x10 /usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a(_clear_bss.o)
                0x000000000000009e                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000000000000ae        0x8 /usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/crtm644p.o
 *(.init9)
 *(.text)
 .text          0x00000000000000b6        0x4 /usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/crtm644p.o
                0x00000000000000b6                __vector_22
                0x00000000000000b6                __vector_28
                0x00000000000000b6                __vector_1
                0x00000000000000b6                __vector_24
                0x00000000000000b6                __vector_12
                0x00000000000000b6                __bad_interrupt
                0x00000000000000b6                __vector_6
                0x00000000000000b6                __vector_3
                0x00000000000000b6                __vector_23
                0x00000000000000b6                __vector_30
                0x00000000000000b6                __vector_25
                0x00000000000000b6                __vector_11
                0x00000000000000b6                __vector_13
                0x00000000000000b6                __vector_17
                0x00000000000000b6                __vector_19
                0x00000000000000b6                __vector_7
                0x00000000000000b6                __vector_27
                0x00000000000000b6                __vector_5
                0x00000000000000b6                __vector_4
                0x00000000000000b6                __vector_9
                0x00000000000000b6                __vector_2
                0x00000000000000b6                __vector_21
                0x00000000000000b6                __vector_15
                0x00000000000000b6                __vector_29
                0x00000000000000b6                __vector_8
                0x00000000000000b6                __vector_26
                0x00000000000000b6                __vector_14
                0x00000000000000b6                __vector_10
                0x00000000000000b6                __vector_16
                0x00000000000000b6                __vector_18
                0x00000000000000b6                __vector_20
                0x00000000000000ba                . = ALIGN (0x2)
 *(.text.*)
 .text.main     0x00000000000000ba       0xb6 sendNum.o
                0x00000000000000ba                main
 .text.uart_init
                0x0000000000000170      0x4ae uart.o
                0x0000000000000170                uart_init
 .text.uart_send_byte
                0x000000000000061e       0x54 uart.o
                0x000000000000061e                uart_send_byte
 .text.uart_send_bytes
                0x0000000000000672       0x54 uart.o
                0x0000000000000672                uart_send_bytes
 .text.uart_send_string
                0x00000000000006c6       0x4c uart.o
                0x00000000000006c6                uart_send_string
 .text.avr-libc
                0x0000000000000712        0xe /usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/libc.a(strcpy.o)
                0x0000000000000712                strcpy
                0x0000000000000720                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x0000000000000720        0x0 /usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a(_exit.o)
                0x0000000000000720                exit
                0x0000000000000720                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x0000000000000720        0x2 /usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x0000000000000722                _etext = .

.data           0x0000000000800100       0x3c load address 0x0000000000000722
                0x0000000000800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800100        0x0 /usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/crtm644p.o
 .data          0x0000000000800100        0xd sendNum.o
 .data          0x000000000080010d        0x0 uart.o
 .data          0x000000000080010d        0x0 /usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a(_exit.o)
 .data          0x000000000080010d        0x0 /usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a(_copy_data.o)
 .data          0x000000000080010d        0x0 /usr/bin/../lib/gcc/avr/4.1.2/avr5/libgcc.a(_clear_bss.o)
 .data          0x000000000080010d        0x0 /usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/libc.a(strcpy.o)
 *(.data*)
 .data.pp1      0x000000000080010d       0x28 sendNum.o
                0x000000000080010d                pp1
 *(.rodata)
 *(.rodata*)
 .rodata.C.0.1459
                0x0000000000800135        0x7 sendNum.o
 *(.gnu.linkonce.d*)
                0x000000000080013c                . = ALIGN (0x2)
                0x000000000080013c                _edata = .
                0x000000000080013c                PROVIDE (__data_end, .)

.bss            0x000000000080013c        0x9 load address 0x000000000080013c
                0x000000000080013c                PROVIDE (__bss_start, .)
 *(.bss)
 *(.bss*)
 .bss.byte_transmitted
                0x000000000080013c        0x1 uart.o
 .bss.uart_config
                0x000000000080013d        0x7 uart.o
 *(COMMON)
 COMMON         0x0000000000800144        0x1 sendNum.o
                0x0000000000800144                pp2
                0x0000000000800145                PROVIDE (__bss_end, .)

.snapshotSP     0x0000000000800145        0x0
                0x0000000000800145                PROVIDE (__snapshotSP_start, .)
                0x0000000000800185                __snapshotSP_size = 0x40
 *(.snapshotSP)
                0x00000000010002ca                __snapshotSP_end = (__snapshotSP_start + __snapshotSP_size)

.snapshot       0x000000000080014b        0x0
                0x000000000080014b                PROVIDE (__snapshot_start, .)
 *(.snapshot)
                0x0000000000000722                __data_load_start = LOADADDR (.data)
                0x000000000000075e                __data_load_end = (__data_load_start + SIZEOF (.data))

.callerstacklen
 *(.callerstacklen)

.noinit         0x0000000000800145        0x0
                0x0000000000800145                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0000000000800145                PROVIDE (__noinit_end, .)
                0x0000000000800145                _end = .
                0x0000000000800145                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x0000000000000000      0xf60
 *(.stab)
 .stab          0x0000000000000000      0x6b4 /usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/crtm644p.o
 .stab          0x00000000000006b4      0x840 uart.o
                                        0xf90 (size before relaxing)
 .stab          0x0000000000000ef4       0x6c /usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/libc.a(strcpy.o)
                                         0x78 (size before relaxing)

.stabstr        0x0000000000000000      0xc4d
 *(.stabstr)
 .stabstr       0x0000000000000000      0xc4d /usr/bin/../lib/gcc/avr/4.1.2/../../../../avr/lib/avr5/crtm644p.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(sendNum.elf elf32-avr)
LOAD linker stubs
